<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__source_8cpp_source" xml:lang="en-US">
<title>Source.cpp</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__source_8cpp_source_1l00001"/>00001 
<anchor xml:id="__source_8cpp_source_1l00002"/>00002 
<anchor xml:id="__source_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;This&#32;file&#32;contains&#32;the&#32;Question&#32;2&#32;of&#32;Lab&#32;4</emphasis>
<anchor xml:id="__source_8cpp_source_1l00004"/>00004 
<anchor xml:id="__source_8cpp_source_1l00005"/>00005 
<anchor xml:id="__source_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00009"/>00009 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="__source_8cpp_source_1l00010"/>00010 
<anchor xml:id="__source_8cpp_source_1l00011"/>00011 <emphasis role="comment">//&#32;Standard&#32;Deviation&#32;Function&#32;Prototype</emphasis>
<anchor xml:id="__source_8cpp_source_1l00012"/>00012 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__source_8cpp_1a4203819784dff2591dbcb83a700e9e3d">standardDeviation</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;count,&#32;<emphasis role="keywordtype">float</emphasis>&#32;mean,&#32;<emphasis role="keywordtype">float</emphasis>&#32;*&amp;dataArray);
<anchor xml:id="__source_8cpp_source_1l00013"/>00013 
<anchor xml:id="__source_8cpp_source_1l00014"/><link linkend="__source_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00014</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__source_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()
<anchor xml:id="__source_8cpp_source_1l00015"/>00015 {
<anchor xml:id="__source_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;opening&#32;file&#32;for&#32;reading</emphasis>
<anchor xml:id="__source_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;ifstream&#32;fin(<emphasis role="stringliteral">&quot;dataArray.txt&quot;</emphasis>,&#32;ios::in&#32;||&#32;ios::app);
<anchor xml:id="__source_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;checking&#32;if&#32;file&#32;is&#32;not&#32;opened</emphasis>
<anchor xml:id="__source_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fin.is_open())
<anchor xml:id="__source_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;{
<anchor xml:id="__source_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;opening&#32;dataArray.txt&#32;for&#32;reading\n&quot;</emphasis>;
<anchor xml:id="__source_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="__source_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;}
<anchor xml:id="__source_8cpp_source_1l00024"/>00024 
<anchor xml:id="__source_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;file&#32;is&#32;opened</emphasis>
<anchor xml:id="__source_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reading&#32;count&#32;from&#32;file</emphasis>
<anchor xml:id="__source_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;_count[50];
<anchor xml:id="__source_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;fin.getline(_count,&#32;50,&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
<anchor xml:id="__source_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;converting&#32;count&#32;to&#32;integer&#32;as&#32;it&#32;cannot&#32;be&#32;a&#32;floating&#32;point</emphasis>
<anchor xml:id="__source_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;atoi(_count);
<anchor xml:id="__source_8cpp_source_1l00031"/>00031 
<anchor xml:id="__source_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;creating&#32;a&#32;dynamic&#32;array&#32;of&#32;N&#32;size</emphasis>
<anchor xml:id="__source_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;dataArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[count];
<anchor xml:id="__source_8cpp_source_1l00034"/>00034 
<anchor xml:id="__source_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterating&#32;to&#32;file&#32;till&#32;count&#32;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sum&#32;=&#32;0.0f,&#32;temp&#32;=&#32;0.0f;
<anchor xml:id="__source_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[20];
<anchor xml:id="__source_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)
<anchor xml:id="__source_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;{
<anchor xml:id="__source_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fin.getline(buffer,&#32;20,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>);
<anchor xml:id="__source_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;atof(buffer);
<anchor xml:id="__source_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dataArray[i]&#32;=&#32;temp;
<anchor xml:id="__source_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;temp;
<anchor xml:id="__source_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="__source_8cpp_source_1l00045"/>00045 
<anchor xml:id="__source_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;file</emphasis>
<anchor xml:id="__source_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;fin.close();
<anchor xml:id="__source_8cpp_source_1l00048"/>00048 
<anchor xml:id="__source_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;printing&#32;to&#32;console</emphasis>
<anchor xml:id="__source_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;number&#32;of&#32;floating&#32;point&#32;values&#32;(N):\t&quot;</emphasis>&#32;&lt;&lt;&#32;count&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__source_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mean&#32;=&#32;sum/count;
<anchor xml:id="__source_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;mean&#32;of&#32;floating&#32;point&#32;values:\t&quot;</emphasis>&#32;&lt;&lt;&#32;mean&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__source_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">//cout&#32;&lt;&lt;&#32;&quot;Address&#32;of&#32;data&#32;array&#32;before&#32;passing&#32;is:&#32;&quot;&#32;&lt;&lt;&#32;&amp;dataArray&#32;&lt;&lt;&#32;endl;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;sample&#32;standard&#32;deviation&#32;(s):\t&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="__source_8cpp_1a4203819784dff2591dbcb83a700e9e3d">standardDeviation</link>(count,&#32;mean,&#32;dataArray)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__source_8cpp_source_1l00055"/>00055 
<anchor xml:id="__source_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deleting&#32;dynamic&#32;dataArray</emphasis>
<anchor xml:id="__source_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;dataArray;
<anchor xml:id="__source_8cpp_source_1l00058"/>00058 }
<anchor xml:id="__source_8cpp_source_1l00059"/>00059 
<anchor xml:id="__source_8cpp_source_1l00060"/>00060 
<anchor xml:id="__source_8cpp_source_1l00061"/>00061 <emphasis role="comment">//&#32;Standard&#32;Deviation&#32;Function&#32;Definition</emphasis>
<anchor xml:id="__source_8cpp_source_1l00062"/><link linkend="__source_8cpp_1a4203819784dff2591dbcb83a700e9e3d">00062</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__source_8cpp_1a4203819784dff2591dbcb83a700e9e3d">standardDeviation</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;count,&#32;<emphasis role="keywordtype">float</emphasis>&#32;mean,&#32;<emphasis role="keywordtype">float</emphasis>&#32;*&amp;dataArray)
<anchor xml:id="__source_8cpp_source_1l00063"/>00063 {
<anchor xml:id="__source_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="comment">//cout&#32;&lt;&lt;&#32;&quot;Address&#32;of&#32;data&#32;array&#32;after&#32;passing&#32;is:&#32;&quot;&#32;&lt;&lt;&#32;&amp;dataArray&#32;&lt;&lt;&#32;endl;</emphasis>
<anchor xml:id="__source_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;calculates&#32;the&#32;standard&#32;deviation</emphasis>
<anchor xml:id="__source_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;count&#32;represents&#32;N</emphasis>
<anchor xml:id="__source_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;mean&#32;represents&#32;average</emphasis>
<anchor xml:id="__source_8cpp_source_1l00068"/>00068 
<anchor xml:id="__source_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementing&#32;sigma&#32;notation</emphasis>
<anchor xml:id="__source_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterating&#32;till&#32;N&#32;times</emphasis>
<anchor xml:id="__source_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sum&#32;=&#32;0.0f;
<anchor xml:id="__source_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;temp&#32;=&#32;0;
<anchor xml:id="__source_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)
<anchor xml:id="__source_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;{
<anchor xml:id="__source_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;pow((dataArray[i]&#32;-&#32;mean),&#32;2);
<anchor xml:id="__source_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;temp;
<anchor xml:id="__source_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="__source_8cpp_source_1l00078"/>00078 
<anchor xml:id="__source_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;sum&#32;=&#32;sum&#32;/&#32;(count&#32;-&#32;1);
<anchor xml:id="__source_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;sum&#32;=&#32;pow(sum,&#32;0.5);
<anchor xml:id="__source_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum;
<anchor xml:id="__source_8cpp_source_1l00082"/>00082 }
</programlisting></section>
